// second largest element in array

int largest = arr[0];
		int sLargest = INT_MIN;
		
        for(int i=1;i<n;i++){
            if(arr[i]>largest){
                sLargest=largest;
                largest=arr[i];
            }
            else if(arr[i]>sLargest && arr[i]<largest ){            // optimal approch O(n)
           
                sLargest=arr[i];
            }
             
        }
        if(sLargest!=INT_MIN){
            return sLargest;
        }
        else{
            return -1;
        }
        
	
//better approch 
int largest =a[0];
for(int i=0; i<n;i++){
    if (a[i]>largest){
    largest=a[i];
   }
}
sLargest=-1;
for(i=0;i<n;i++){
 if(a[i]<largest && a[i]!=largest){   // O(n+n)=O(2n)
    sLargest=a[i];
 }
 
}
   //Left Rotate an Array by One
   
   #include <bits/stdc++.h> 
vector<int> rotateArray(vector<int>& arr, int n) {
    // Write your code here.
    int temp=arr[0];
    for(int i=1;i<n;i++){
        arr[i-1]=arr[i];
    }
    arr[n-1]=temp;

    return arr;
}




//Rotate array by k places

#include <bits/stdc++.h> 
#include <iostream>
using namespace std;

void leftRotate(int arr[],int n,int d){
    d=d%n;

    int temp[d];
    for(int i=0;i<d;i++){
        temp[i]=arr[i];
    }

    for(int i=d;i<n;i++){
        arr[i-d]=arr[i];
    }

    for(int i=n-d;i<n;i++){
        arr[i]=temp[i-(n-d)];
    }
}

int main() {
    //Write your code here

    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }

    int d;
    cin>>d;
    leftRotate(arr,n,d);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }

    return 0;
}

// Non-Decreasing Array 

#include <bits/stdc++.h> 
bool isPossible(int *arr, int n)
{
    //  Write your code here.

    int count=0;
    for(int i=1;i<n;i++){
        if(arr[i]<arr[i-1]){
            count++;
            if(count>1) return false;
            if(i<2||arr[i-2]<=arr[i]){
                arr[i-1]=arr[i];
            }
            else{
                arr[i]=arr[i-1];
            }
        }
    }
    return true;
}


//Equilibrium index of array 

#include <bits/stdc++.h> 
int findEquilibriumIndex(vector<int> &arr) {
    // Write your code here.

    int sum =0;
    int leftsum=0;
    int n=arr.size();
    for(int i=0;i<n;++i){
        sum+=arr[i];
    }
    for(int i=0;i<n;++i){
        sum-=arr[i] ;// caulate the right sum 

        if(leftsum==sum)
            return i;

        leftsum+=arr[i] ;
    }

    return -1;
}


// First Missing Positive number in array

#include <bits/stdc++.h> 
int firstMissing(int arr[], int n)
{
    // Write your code here.

    for(int i=0;i<n;i++){

        if(arr[i]<=0){
            arr[i]=n+1;
        }
    }

    for(int i=0;i<n;i++){
        int index=abs(arr[i])-1;
        if(index<n){
            arr[index]*=-1;
        }
    }

    for(int i=0;i<n;i++){
        if(arr[i]>0){
            return i+1;
        }
    }

    return n+1;

    
}
